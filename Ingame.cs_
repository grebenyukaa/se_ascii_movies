#region ingame_script
struct code_type : IComparable<code_type>, IEquatable<code_type>
{
    public code_type(int val)
    {
        value = val;
    }
    
    public static implicit operator int(code_type t)
    {
        return t.value;
    }

    public static implicit operator code_type(int t)
    {
        return new code_type(t);
    }

    public static int sizeOf { get { return sizeof(int); } }
    public override string ToString() { return value.ToString(); }
    public override int GetHashCode() { return value.GetHashCode(); }
    public int CompareTo(code_type other) { return value.CompareTo(other.value); }
    public bool Equals(code_type other) { return value.Equals(other.value); }

    private int value;
}

static class Converter
{
    public static IEnumerable<byte> AsByteArray(code_type[] input)
    {
        foreach (code_type e in input)
        {
            foreach (byte b in BitConverter.GetBytes(e))
                yield return b;
        }
    }

    public static code_type ToCodeType(byte[] bytes)
    {
        return BitConverter.ToInt32(bytes, 0);
    }
}

static class Alphabet
{
    public static char[] StarWars = {'g', 'v', '0', 'D', '9', 'J', 'C', 'k', 'N', 'n', 'M', 'V', '#', '~', 'H', 't', 'P',
        '>', 'o', 'E', '|', '"', 'f', '4', 'z', 'b', '7', 'p', 'w', 'X', 'Ã¿', 'a', ':', 'q', ' ', '$', 'U', '[',
        '6', 'I', 'T', 'j', 'u', 'W', ')', 'i', 'Y', '+', 's', 'S', ';', 'c', 'B', '=', 'A', '^', '`', 'K', 'R',
        'y', '%', '!', 'O', '/', 'e', '\\', ']', 'd', '?', 'F', '\'', '}', 'l', '.', '2', 'L', '_', 'G', '*', ',',
        'x', 'r', '1', '{', 'm', '(', '\n', '-', '@', '5', '<', '8', '3', 'h'
    };
}

class LZWInputStream
{
    public LZWInputStream(int blockSize)
    {
        this.blockSize = blockSize;
    }

    public class UnpackBitsState
    {
        public UnpackBitsState(byte[] input)
        {
            inputIndex = 0;
            outputStringLen = ReadInt32(input);
            fullBytes = ReadInt32(input);
            fullByteCodeCount = new int[fullBytes];
            for (int i = 0; i < fullBytes; ++i)
            {
                fullByteCodeCount[i] = ReadInt32(input);
            }

            fullByteCodeEnd = new int[fullBytes];
            int idx = inputIndex;
            for (int i = 0; i < fullBytes; ++i)
            {
                fullByteCodeEnd[i] = idx + fullByteCodeCount[i] - 1;
                idx += fullByteCodeCount[i];
            }

            int codeArrayLen = 0;
            for (int cc = 0; cc < fullByteCodeCount.Length; ++cc)
                codeArrayLen += fullByteCodeCount[cc] / (cc + 1);
            codes = new code_type[codeArrayLen];
        }

        public void UnpackNext(byte[] input, int lastIndex)
        {
            byte[] buf = new byte[code_type.sizeOf];
            for (; inputIndex <= lastIndex;)
            {
                int curFullBytes = Array.FindIndex(fullByteCodeEnd, x => inputIndex <= x) + 1;
                for (int j = 0; j < curFullBytes; ++j)
                    buf[j] = input[inputIndex + j];
                
                codes[codeIndex++] = Converter.ToCodeType(buf);
                inputIndex += curFullBytes;
            }
        }

        private int ReadInt32(byte[] input)
        {
            int ret = BitConverter.ToInt32(input, inputIndex);
            inputIndex += sizeof(Int32);
            return ret;
        }

        public code_type[] codes { get; private set; }
        public int outputStringLen { get; private set; }

        private int inputIndex;
        private int codeIndex;
        private int fullBytes;
        private int[] fullByteCodeCount;
        private int[] fullByteCodeEnd;
    }

    public class DecoderState
    {
        public DecoderState(char[] alphabet, code_type[] input, int outputStringLen)
        {
            nextCode = 0;
            revDict = new Dictionary<code_type, string>();
            foreach (char c in alphabet)
            {
                AddSymbol(c.ToString());
            }

            text = new char[outputStringLen];
            
            inputIndex = 0;
            old = input[inputIndex++];
            s = revDict[old];

            outputIndex = 0;
            s.CopyTo(0, text, outputIndex, s.Length);
            outputIndex += s.Length;
        }

        public void DecodeNext(code_type[] input, int lastIndex)
        {
            // see https://www.geeksforgeeks.org/lzw-lempel-ziv-welch-compression-technique/

            for (; inputIndex <= lastIndex; ++inputIndex)
            {
                code_type code = input[inputIndex];
                if (!revDict.ContainsKey(code))
                { 
                    s = revDict[old] + s[0];
                } 
                else
                { 
                    s = revDict[code];
                } 

                s.CopyTo(0, text, outputIndex, s.Length);
                outputIndex += s.Length;

                AddSymbol(revDict[old] + s[0]);
                old = code;
            }
        }

        private code_type AddSymbol(string sym)
        {
            code_type code = nextCode++;
            revDict.Add(code, sym);
            return code;
        }

        public char[] text { get; private set; }
        private int outputIndex;
        private int inputIndex;
        private code_type old;
        private string s;

        private code_type nextCode;
        private Dictionary<code_type, string> revDict;
    }

    public IEnumerator<UnpackBitsState> UnpackBits(UnpackBitsState st, byte[] input)
    {
        int next = 0;
        for (int i = 0; i < input.Length;)
        {
            next += (i + blockSize) < input.Length ? blockSize : (input.Length - i);
            st.UnpackNext(input, next);
            i = next + 1;
            yield return st;
        }
        yield return st;
    }

    public IEnumerator<DecoderState> Decode(DecoderState st, code_type[] input)
    {
        int next = 0;
        for (int i = 0; i < input.Length;)
        {
            next += (i + blockSize) < input.Length ? blockSize : (input.Length - i);
            st.DecodeNext(input, next);
            i = next + 1;
            yield return st;
        }
        yield return st;
    }

    private int blockSize;
}

class AsciiMovie
{
    public AsciiMovie(string decodedMovie)
    {
        rowStream = decodedMovie.Split('\n');
    }

    public class Frame
    {
        public Frame(IEnumerable<string> rows)
        {
            var sTime = rows.FirstOrDefault();
            if (sTime.Length == 0)
                throw new ArgumentException("bad frame data: empty");
            
            time = Convert.ToInt32(sTime);
            this.rows = rows.Skip(1).ToArray();
        }
        public string[] rows { get; private set; }
        public int time { get; private set; }
    }

    public IEnumerator<Frame> GetFrameIterator(int rowsPerFrame = 14)
    {
        for (int fid = 0; fid < rowStream.Length / rowsPerFrame; ++fid)
        {
            IEnumerable<string> frameRows = rowStream.Skip(fid * rowsPerFrame).Take(rowsPerFrame);
            yield return new Frame(frameRows.ToArray());
        }
    }

    private string[] rowStream;
}

#endregion ingame_script


////////////////////

IMyTextPanel outputPanel;

byte[] encodedMovie;
AsciiMovie movie;
IEnumerator<AsciiMovie.Frame> itFrame;

LZWInputStream lzw;
LZWInputStream.UnpackBitsState stUnpack;
IEnumerator<LZWInputStream.UnpackBitsState> itUnpack;
LZWInputStream.DecoderState stDecode;
IEnumerator<LZWInputStream.DecoderState> itDecode;

bool unpackingFinished;
bool decodingFinished;
bool playbackFinished;

public Program()
{
    var gts = GridTerminalSystem;
    IMyTerminalBlock movieDataBlock = gts.GetBlockWithName("movie theater server");
    outputPanel = (IMyTextPanel)gts.GetBlockWithName("movie theater screen");
    
    encodedMovie = Convert.FromBase64String(movieDataBlock.CustomData);

    unpackingFinished = false;
    decodingFinished = false;
    playbackFinished = false;
        
    Runtime.UpdateFrequency = UpdateFrequency.Update1;
}

public void Main(string argument, UpdateType updateSource)
{
    if (lzw == null)
    {
        Echo("init LZW stream");
        lzw = new LZWInputStream(2048);
    }

    if (!unpackingFinished)
    {
        if (stUnpack == null)
        {
            Echo("init unpacking state");
            stUnpack = new LZWInputStream.UnpackBitsState(encodedMovie);
            itUnpack = lzw.UnpackBits(stUnpack, encodedMovie);
        }

        Echo("unpack next");
        unpackingFinished = !itUnpack.MoveNext();
    }

    if (!decodingFinished && unpackingFinished)
    {
        if (stDecode == null)
        {
            Echo("init decoding state");
            stDecode = new LZWInputStream.DecoderState(Alphabet.StarWars, stUnpack.codes, stUnpack.outputStringLen);
            itDecode = lzw.Decode(stDecode, stUnpack.codes);
        }

        Echo("decode next");
        decodingFinished = !itDecode.MoveNext();
    }

    if (decodingFinished && unpackingFinished && !playbackFinished)
    {
        if (movie == null)
        {
            movie = new AsciiMovie(new string(stDecode.text));
            itFrame = movie.GetFrameIterator();
            Runtime.UpdateFrequency = UpdateFrequency.Update10;
        }
        
        if (itFrame.MoveNext())
        {
            Echo("playing frame");
            AsciiMovie.Frame f = itFrame.Current;
            outputPanel.WriteText(string.Join("\n", f.rows));
        }
        else
        {
            playbackFinished = true;
        }
    }
}
