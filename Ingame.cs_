#region ingame_script
struct code_type : IComparable<code_type>, IEquatable<code_type>
{
    public code_type(int val)
    {
        value = val;
    }
    
    public static implicit operator int(code_type t)
    {
        return t.value;
    }

    public static implicit operator code_type(int t)
    {
        return new code_type(t);
    }

    public static int sizeOf { get { return sizeof(int); } }
    public override string ToString() { return value.ToString(); }
    public override int GetHashCode() { return value.GetHashCode(); }
    public int CompareTo(code_type other) { return value.CompareTo(other.value); }
    public bool Equals(code_type other) { return value.Equals(other.value); }

    private int value;
}

static class Converter
{
    public static IEnumerable<byte> AsByteArray(code_type[] input)
    {
        foreach (code_type e in input)
        {
            foreach (byte b in BitConverter.GetBytes(e))
                yield return b;
        }
    }

    public static code_type ToCodeType(byte[] bytes)
    {
        return BitConverter.ToInt32(bytes, 0);
    }
}

static class Alphabet
{
    public static char[] StarWars = {'q', 'O', 'j', '8', '}', 'v', 'x', 'l', '\n', 'G', '3', 'L', 'm', '/', '{', '*', 'D', '#', 's', ']', 'g',
        'R', '>', '"', '7', ' ', 'E', ';', 'T', '6', 'I', 'z', '.', '0', '+', 'h', 'w', 'f', '|', '5', 'N', 'M', 'Y', '=', 'k', '?', 'A', 'b',
        'd', 'B', '<', 'U', 'X', '1', 'u', '$', '\\', 'C', '[', '-', '~', 'S', ')', 'a', 'P', 'r', 't', 'W', 'n', 'o', 'y', '%', '!', '(', '4',
        'V', '`', 'p', 'K', ':', 'e', '@', ',', 'F', '2', 'H', '9', 'J', '_', 'c', 'i', '\'', '^'
    };
}

class LZWInputStream
{
    public LZWInputStream(int blockSize)
    {
        this.blockSize = blockSize;
    }

    public class UnpackBitsState
    {
        public UnpackBitsState(byte[] input)
        {
            inputIndex = 0;
            outputStringLen = ReadInt32(input);
            fullBytes = ReadInt32(input);
            fullByteCodeCount = new int[fullBytes];
            for (int i = 0; i < fullBytes; ++i)
            {
                fullByteCodeCount[i] = ReadInt32(input);
            }

            fullByteCodeEnd = new int[fullBytes];
            int idx = inputIndex;
            for (int i = 0; i < fullBytes; ++i)
            {
                fullByteCodeEnd[i] = idx + fullByteCodeCount[i] - 1;
                idx += fullByteCodeCount[i];
            }

            int codeArrayLen = 0;
            for (int cc = 0; cc < fullByteCodeCount.Length; ++cc)
                codeArrayLen += fullByteCodeCount[cc] / (cc + 1);
            codes = new code_type[codeArrayLen];
        }

        public void UnpackNext(byte[] input, int lastIndex)
        {
            byte[] buf = new byte[code_type.sizeOf];
            for (; inputIndex <= lastIndex;)
            {
                int curFullBytes = Array.FindIndex(fullByteCodeEnd, x => inputIndex <= x) + 1;
                for (int j = 0; j < curFullBytes; ++j)
                    buf[j] = input[inputIndex + j];
                
                codes[codeIndex++] = Converter.ToCodeType(buf);
                inputIndex += curFullBytes;
            }
        }

        private int ReadInt32(byte[] input)
        {
            int ret = BitConverter.ToInt32(input, inputIndex);
            inputIndex += sizeof(Int32);
            return ret;
        }

        public code_type[] codes { get; private set; }
        public int outputStringLen { get; private set; }

        private int inputIndex;
        private int codeIndex;
        private int fullBytes;
        private int[] fullByteCodeCount;
        private int[] fullByteCodeEnd;
    }

    public class DecoderState
    {
        public DecoderState(char[] alphabet, code_type[] input, int outputStringLen)
        {
            nextCode = 0;
            revDict = new Dictionary<code_type, string>();
            foreach (char c in alphabet)
            {
                AddSymbol(c.ToString());
            }

            text = new char[outputStringLen];
            
            inputIndex = 0;
            old = input[inputIndex++];
            s = revDict[old];

            outputIndex = 0;
            s.CopyTo(0, text, outputIndex, s.Length);
            outputIndex += s.Length;
        }

        public void DecodeNext(code_type[] input, int lastIndex)
        {
            // see https://www.geeksforgeeks.org/lzw-lempel-ziv-welch-compression-technique/

            for (; inputIndex <= lastIndex; ++inputIndex)
            {
                code_type code = input[inputIndex];
                if (!revDict.ContainsKey(code))
                { 
                    s = revDict[old] + s[0];
                } 
                else
                { 
                    s = revDict[code];
                } 

                s.CopyTo(0, text, outputIndex, s.Length);
                outputIndex += s.Length;

                AddSymbol(revDict[old] + s[0]);
                old = code;
            }
        }

        private code_type AddSymbol(string sym)
        {
            code_type code = nextCode++;
            revDict.Add(code, sym);
            return code;
        }

        public char[] text { get; private set; }
        private int outputIndex;
        private int inputIndex;
        private code_type old;
        private string s;

        private code_type nextCode;
        private Dictionary<code_type, string> revDict;
    }

    public IEnumerator<UnpackBitsState> UnpackBits(UnpackBitsState st, byte[] input)
    {
        int next = 0;
        for (int i = 0; i < input.Length;)
        {
            next += (i + blockSize) < input.Length ? blockSize : (input.Length - i);
            st.UnpackNext(input, next);
            i = next + 1;
            yield return st;
        }
        yield return st;
    }

    public IEnumerator<DecoderState> Decode(DecoderState st, code_type[] input)
    {
        int next = 0;
        for (int i = 0; i < input.Length;)
        {
            next += (i + blockSize) < input.Length ? blockSize : (input.Length - i);
            st.DecodeNext(input, next);
            i = next + 1;
            yield return st;
        }
        yield return st;
    }

    private int blockSize;
}

public class AsciiMovie
{
    public AsciiMovie(MyGridProgram prog, string decodedMovie)
    {
        _this = prog;
        rowStream = decodedMovie.Split('\n');
    }

    public class Frame
    {
        public Frame(MyGridProgram _this, int fid, string[] rows)
        {
            _this.Echo($"Parsing frame {fid}");
            //_this.Echo($"{string.Join("\n", rows.ToArray())}");

            var sTime = rows.FirstOrDefault();
            if (sTime.Length == 0)
                throw new ArgumentException("bad frame data: empty");
            
            time = Math.Max(Convert.ToInt32(sTime), 1) * 4; // 1 second = 60 ticks, value is given in 1/15th of a second
            this.rows = rows.Skip(1).ToArray();
        }
        public string[] rows { get; private set; }
        public int time { get; private set; }
    }

    public IEnumerator<Frame> GetFrameIterator(int rowsPerFrame = 14)
    {
        for (int fid = 0; fid < rowStream.Length / rowsPerFrame; ++fid)
        {
            IEnumerable<string> frameRows = rowStream.Skip(fid * rowsPerFrame).Take(rowsPerFrame);
            yield return new Frame(_this, fid, frameRows.ToArray());
        }
    }

    private MyGridProgram _this;
    private string[] rowStream;
}

#endregion ingame_script

////////////////////

public class ConfigState
{
    public ConfigState(Program p)
    {
        var gts = p.GridTerminalSystem;
        IMyTerminalBlock movieConfigBlock = gts.GetBlockWithName("movie theater server");
        string configData = movieConfigBlock.CustomData;

        encodedBatches = new List<byte[]>();
        totalSize = 0;

        string[] splitted = configData.Split('\n');
        dataVolumes = new List<IMyTerminalBlock>();
        foreach (var id in splitted)
        {
            var blcs = new List<IMyTerminalBlock>();
            p.Echo(id);
            gts.SearchBlocksOfName(id, blcs);
            dataVolumes.Add(blcs.First());
        }
    }

    public void ProcessDataVolume(string data)
    {
        byte[] sub = Convert.FromBase64String(data);
        totalSize += sub.Length;
        encodedBatches.Add(sub);
    }
 
    public int totalSize { get; private set; }
    public List<byte[]> encodedBatches { get; private set; }
    public List<IMyTerminalBlock> dataVolumes { get; private set; }
}

public IEnumerator<bool> ProcessConfig(ConfigState st)
{
    Echo("process config");
    foreach (var vol in st.dataVolumes)
    {
        Echo($"processing {vol.CustomName}");
        Echo($"size {vol.CustomData.Length}");
        st.ProcessDataVolume(vol.CustomData);
        yield return false;
    }

    encodedMovie = new byte[st.totalSize];
    int retIndex = 0;
    foreach (var batch in st.encodedBatches)
    {
        Array.Copy(batch, 0, encodedMovie, retIndex, batch.Length);
        retIndex += batch.Length;
    }
    yield return true;
}

public IEnumerator<bool> ShowFrame(AsciiMovie.Frame f)
{
    string[] leftPanelText = new string[f.rows.Length];
    string[] centerPanelText = new string[f.rows.Length];
    string[] rightPanelText = new string[f.rows.Length];
    int screenFrameWidth = (int)(Math.Floor(frameWidth / 3.0));
    for (int i = 0; i < f.rows.Length; ++i)
    {
        leftPanelText[i] = new string(f.rows[i].Take(screenFrameWidth).ToArray());//.PadLeft(screenPaddingLeft, ' ');
        centerPanelText[i] = new string(f.rows[i].Skip(screenFrameWidth).Take(screenFrameWidth).ToArray());
        rightPanelText[i] = new string(f.rows[i].Skip(2 * screenFrameWidth).ToArray()).PadRight(screenPaddingRight, ' ');;
    }
    
    outputPanelL.WriteText(string.Join("\n", leftPanelText));
    outputPanelC.WriteText(string.Join("\n", centerPanelText));
    outputPanelR.WriteText(string.Join("\n", rightPanelText));
    
    int left = f.time;
    for (; left > 0; --left)
    {
        Echo($"slleping ticks left: {left}");
        yield return false;
    }
    yield return true;
}

IMyTextPanel outputPanelL;
IMyTextPanel outputPanelC;
IMyTextPanel outputPanelR;
int screenPaddingLeft;
int screenPaddingRight;

LZWInputStream lzw;
byte[] encodedMovie;
int frameWidth;
int frameHeight;
bool processingConfigFinished;
bool unpackingFinished;
bool decodingFinished;
bool playbackFinished;
IEnumerator<bool> itWholeMovieCycle;

public Program()
{
    var gts = GridTerminalSystem;  
    lzw = new LZWInputStream(2048);

    outputPanelL = (IMyTextPanel)gts.GetBlockWithName("movie theater screen left");
    outputPanelC = (IMyTextPanel)gts.GetBlockWithName("movie theater screen center");
    outputPanelR = (IMyTextPanel)gts.GetBlockWithName("movie theater screen right");
    
    // correct settings for a movie frame 14x68, for monospace font
    frameWidth = 68;
    frameHeight = 13;
    screenPaddingLeft = 0;
    screenPaddingRight = 1;
    float fontSize = 1.191f;
    string font = "Monospace";
    outputPanelL.Font = font;
    outputPanelL.FontSize = fontSize;
    outputPanelL.Alignment = VRage.Game.GUI.TextPanel.TextAlignment.LEFT;
    outputPanelC.Font = font;
    outputPanelC.FontSize = fontSize;
    outputPanelC.Alignment = VRage.Game.GUI.TextPanel.TextAlignment.LEFT;
    outputPanelR.Font = font;
    outputPanelR.FontSize = fontSize;
    outputPanelR.Alignment = VRage.Game.GUI.TextPanel.TextAlignment.LEFT;
    
    Reset();

    Runtime.UpdateFrequency = UpdateFrequency.Update1;
}

public void Reset()
{
    unpackingFinished = false;
    decodingFinished = false;
    playbackFinished = false;
    processingConfigFinished = false;
    
    itWholeMovieCycle = GetMovieCycleIterator();
}

public IEnumerator<bool> GetMovieCycleIterator()
{
    // decode base64 to byte[]
    var stConfig = new ConfigState(this);
    var itConfig = ProcessConfig(stConfig);
    while (!processingConfigFinished)
    {
        Echo("processing config");
        processingConfigFinished = !itConfig.MoveNext();
        yield return false;
    }

    // unpack bits
    var stUnpack = new LZWInputStream.UnpackBitsState(encodedMovie);
    var itUnpack = lzw.UnpackBits(stUnpack, encodedMovie);
    while (!unpackingFinished)
    {
        Echo("unpack next");
        unpackingFinished = !itUnpack.MoveNext();
        yield return false;
    }

    // decode with LZW
    var stDecode = new LZWInputStream.DecoderState(Alphabet.StarWars, stUnpack.codes, stUnpack.outputStringLen);
    var itDecode = lzw.Decode(stDecode, stUnpack.codes);
    while (!decodingFinished)
    {
        Echo("decode next");
        decodingFinished = !itDecode.MoveNext();
        yield return false;
    }

    // playback
    var movie = new AsciiMovie(this, new string(stDecode.text));
    var itFrame = movie.GetFrameIterator();
    Runtime.UpdateFrequency = UpdateFrequency.Update1;
    while (itFrame.MoveNext())
    {
        Echo("playing frame");
        AsciiMovie.Frame f = itFrame.Current;
        var itSingleFramePlayback = ShowFrame(f);
    
        while (!itSingleFramePlayback.Current)
        {
            Echo($"playing frame: sleeping ticks = {itFrame.Current.time}");
            itSingleFramePlayback.MoveNext();
            yield return false;
        }
    }
    
    Echo("playback finished!");
    playbackFinished = true;
    yield return true;
}

public void Main(string argument, UpdateType updateSource)
{
    if (updateSource == UpdateType.Update1)
    {
        while (!itWholeMovieCycle.MoveNext())
        {
            Echo($"playback status: {!playbackFinished}");
        }
    }
    else
    {
        Reset();
    }
}